/*----------------------------------------------------------------------------*
* Disciplina: Programaçao Estruturada e Modular                               *
*          Prof. Carlos Veríssimo                                             *
*-----------------------------------------------------------------------------*
* Objetivo do Programa: Refatoração de Código de Gerenciamento de Produtos    *
*                                                                             *
* Data - 04/12/2024                                                           * 
* Autor: Dennis Ramos da Silva                                                *
*---------------------------------------------------------------------------- */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_PRODUTOS 100
#define NOME_MAX 50
#define DESCRICAO_MAX 100

// Definições de Cores ANSI
#define RESET       "\033[0m"
#define BOLD        "\033[1m"
#define UNDERLINE   "\033[4m"
#define BLACK       "\033[30m"
#define RED         "\033[31m"
#define GREEN       "\033[32m"
#define YELLOW      "\033[33m"
#define BLUE        "\033[34m"
#define MAGENTA     "\033[35m"
#define CYAN        "\033[36m"
#define WHITE       "\033[37m"

// Declaração da estrutura Produto
typedef struct {
    int id;
    char nome[NOME_MAX];
    char descricao[DESCRICAO_MAX];
    double precoUnitario;
    int qteDispo;
} Produto;

// Declaração das funções do programa
void inserirProduto(Produto *produtos, int *cont);
void consultarProduto(const Produto *produtos, int cont);
void alterarProduto(Produto *produtos, int cont);
void excluirProduto(Produto *produtos, int *cont);
void listarProdutos(const Produto *produtos, int cont);
void comprarProduto(Produto *produtos, int cont);
void imprimirProduto(const Produto *produto);
void aplicarDesconto(Produto *produtos, int cont);
int buscarProdutoPorID(const Produto *produtos, int cont, int id);
int lerInteiroPositivo(const char *mensagem);
double lerPreco(const char *mensagem);
void lerStringSegura(char *destino, int tamanho, const char *mensagem);
int validarInteiro(const char *input);
void imprimirLinha(char caractere, int quantidade);

int main() {
    Produto produtos[MAX_PRODUTOS]; // Array para armazenar os produtos
    int cont = 0; // Contador de produtos cadastrados
    int opcao; // Variável para armazenar a opção escolhida no menu

    do {
        printf(CYAN "\n===== Menu Principal =====\n" RESET);
        imprimirLinha('=', 30);
        printf(GREEN "1. Inserir produto\n" RESET);
        printf(GREEN "2. Listar produtos\n" RESET);
        printf(GREEN "3. Consultar produto\n" RESET);
        printf(GREEN "4. Alterar produto\n" RESET);
        printf(GREEN "5. Excluir produto\n" RESET);
        printf(RED "6. Comprar produto\n" RESET);
        printf(BLUE "7. Aplicar desconto\n" RESET);
        printf(RED "8. Sair\n" RESET);
        imprimirLinha('=', 30);
        opcao = lerInteiroPositivo("Escolha uma opção");

        // Switch para lidar com a opção escolhida
        switch (opcao) {
            case 1:
                inserirProduto(produtos, &cont);
                break;
            case 2:
                listarProdutos(produtos, cont);
                break;
            case 3:
                consultarProduto(produtos, cont);
                break;
            case 4:
                alterarProduto(produtos, cont);
                break;
            case 5:
                excluirProduto(produtos, &cont);
                break;
            case 6:
                comprarProduto(produtos, cont);
                break;
            case 7:
                aplicarDesconto(produtos, cont);
                break;
            case 8:
                printf(YELLOW "Saindo...\n" RESET);
                break;
            default:
                printf(RED "Opção inválida! Tente novamente.\n" RESET);
        }
    } while (opcao != 8); // Repete o menu até que a opção 8 seja escolhida

    return 0;
}

// Função para aplicar desconto em um produto por ID
void aplicarDesconto(Produto *produtos, int cont) {
    if (cont == 0) {
        printf(RED "Nenhum produto cadastrado.\n" RESET);
        return;
    }

    int idProduto = lerInteiroPositivo("Informe o ID do produto para aplicar desconto");
    int index = buscarProdutoPorID(produtos, cont, idProduto);

    if (index != -1) {
        double percentualDesconto = lerPreco("Informe o percentual de desconto (0-100%)");
        
        if (percentualDesconto > 0 && percentualDesconto <= 100) {
            double descontoValor = produtos[index].precoUnitario * (percentualDesconto / 100.0);
            produtos[index].precoUnitario -= descontoValor;
            
            printf(GREEN "Desconto aplicado com sucesso!\n" RESET);
            printf(BLUE "Novo preço de %s: R$ %.2f\n" RESET, 
                   produtos[index].nome, produtos[index].precoUnitario);
        } else {
            printf(RED "Percentual de desconto inválido.\n" RESET);
        }
    } else {
        printf(RED "Produto com ID %d não encontrado.\n" RESET, idProduto);
    }
}

// Função para comprar produto
void comprarProduto(Produto *produtos, int cont) {
    if (cont == 0) {
        printf(RED "Nenhum produto cadastrado para compra.\n" RESET);
        return;
    }

    int idProduto = lerInteiroPositivo("Informe o ID do produto que deseja comprar");

    int index = buscarProdutoPorID(produtos, cont, idProduto);
    if (index != -1) {
        printf(BLUE "Produto selecionado:\n" RESET);
        imprimirProduto(&produtos[index]);

        int quantidade = lerInteiroPositivo("Informe a quantidade que deseja comprar");
        if (quantidade > 0 && quantidade <= produtos[index].qteDispo) {
            double total = quantidade * produtos[index].precoUnitario;
            produtos[index].qteDispo -= quantidade;
            printf(GREEN "Compra realizada com sucesso! Total: R$ %.2f\n" RESET, total);
        } else {
            printf(RED "Erro: Estoque insuficiente ou quantidade inválida.\n" RESET);
        }
    } else {
        printf(RED "Erro: Produto com ID %d não encontrado.\n" RESET, idProduto);
    }
}

// Função para inserir produto
void inserirProduto(Produto *produtos, int *cont) {
    if (*cont >= MAX_PRODUTOS) {
        printf(RED "Limite de produtos atingido.\n" RESET);
        return;
    }

    Produto novoProduto;
    int idProduto;
    int idExistente;

    do {
        idProduto = lerInteiroPositivo("Informe o ID do produto");

        // Verifica se o ID já existe
        idExistente = 0;
        for (int i = 0; i < *cont; i++) {
            if (produtos[i].id == idProduto) {
                idExistente = 1;
                printf(RED "Erro! Já existe um produto com este ID. Escolha outro.\n" RESET);
                break;
            }
        }
    } while (idExistente); // Repete até que o ID seja único

    // Continua com a coleta de informações do novo produto
    novoProduto.id = idProduto;
    lerStringSegura(novoProduto.nome, NOME_MAX, "Informe o nome do produto");
    lerStringSegura(novoProduto.descricao, DESCRICAO_MAX, "Informe a descrição do produto");
    novoProduto.precoUnitario = lerPreco("Informe o preço unitário");
    novoProduto.qteDispo = lerInteiroPositivo("Informe a quantidade disponível");

    // Adiciona o produto ao array e incrementa o contador
    produtos[*cont] = novoProduto;
    (*cont)++; // Incrementa o contador APÓS adicionar o produto

    printf(GREEN "Produto inserido com sucesso!\n" RESET);
}

// Função para listar todos os produtos cadastrados
void listarProdutos(const Produto *produtos, int cont) {
    if (cont == 0) {
        printf(RED "Nenhum produto cadastrado.\n" RESET);
        return;
    }
    printf("\n" BLUE "Lista de Produtos:\n" RESET);
    imprimirLinha('-', 40);
    for (int i = 0; i < cont; i++) {
        imprimirProduto(&produtos[i]);
    }
    imprimirLinha('-', 40);
}

// Função para imprimir as informações de um produto
void imprimirProduto(const Produto *produto) {
    printf("ID: %d, Nome: %s, Descrição: %s, Preço: R$ %.2f, Estoque: %d\n", 
        produto->id, produto->nome, produto->descricao, produto->precoUnitario, produto->qteDispo);
}

// Função para consultar um produto específico pelo ID
void consultarProduto(const Produto *produtos, int cont) {
    int idProduto = lerInteiroPositivo("Informe o ID do produto que deseja consultar");

    int index = buscarProdutoPorID(produtos, cont, idProduto);
    if (index != -1) {
        imprimirProduto(&produtos[index]);
    } else {
        printf(RED "Produto inexistente.\n" RESET);
    }
}

// Função para alterar as informações de um produto
void alterarProduto(Produto *produtos, int cont) {
    int idProduto = lerInteiroPositivo("Informe o ID do produto que deseja alterar");

    int index = buscarProdutoPorID(produtos, cont, idProduto);
    if (index != -1) {
        lerStringSegura(produtos[index].nome, NOME_MAX, "Novo nome do produto");
        lerStringSegura(produtos[index].descricao, DESCRICAO_MAX, "Nova descrição do produto");
        produtos[index].precoUnitario = lerPreco("Novo preço unitário");
        produtos[index].qteDispo = lerInteiroPositivo("Nova quantidade disponível");
        printf(GREEN "Produto alterado com sucesso!\n" RESET);
    } else {
        printf(RED "Produto inexistente.\n" RESET);
    }
}

// Função para excluir um produto pelo ID
void excluirProduto(Produto *produtos, int *cont) {
    int idProduto = lerInteiroPositivo("Informe o ID do produto que deseja excluir");

    int index = buscarProdutoPorID(produtos, *cont, idProduto);
    if (index != -1) {
        // Remove o produto da lista
        for (int i = index; i < *cont - 1; i++) {
            produtos[i] = produtos[i + 1];
        }
        (*cont)--;
        printf(GREEN "Produto excluído com sucesso!\n" RESET);
    } else {
        printf(RED "Produto inexistente.\n" RESET);
    }
}

// Função para imprimir uma linha de separação
void imprimirLinha(char caractere, int quantidade) {
    for (int i = 0; i < quantidade; i++) {
        printf("%c", caractere);
    }
    printf("\n");
}

// Função para ler uma string segura (sem números no nome do produto)
void lerStringSegura(char *destino, int tamanho, const char *mensagem) {
    int valido;
    do {
        printf("%s: ", mensagem);
        fgets(destino, tamanho, stdin);
        destino[strcspn(destino, "\n")] = '\0'; // Remove o '\n' da string
        
        valido = 1;
        for (int i = 0; destino[i] != '\0'; i++) {
            if (isdigit(destino[i])) {
                valido = 0; 
                printf(RED "Erro! O nome não pode conter números. Tente novamente.\n" RESET);
                break;
            }
        }
    } while (!valido);
}

// Função para buscar um produto pelo ID
int buscarProdutoPorID(const Produto *produtos, int cont, int id) {
    for (int i = 0; i < cont; i++) {
        if (produtos[i].id == id) {
            return i;  // Retorna o índice do produto
        }
    }
    return -1;  // Retorna -1 se não encontrar o produto
}

// Função para ler um número inteiro positivo
int lerInteiroPositivo(const char *mensagem) {
    int valor;
    char input[100];

    while (1) {
        printf("%s: ", mensagem);
        fgets(input, sizeof(input), stdin);
        
        // Remove o '\n' da string
        input[strcspn(input, "\n")] = '\0';

        // Valida se o input é um número inteiro positivo
        if (validarInteiro(input)) {
            valor = atoi(input);
            if (valor > 0) {
                return valor;
            }
        }
        printf(RED "Erro! O valor deve ser um número inteiro positivo.\n" RESET);
    }
}

// Função para validar se uma string representa um número inteiro
int validarInteiro(const char *input) {
    for (int i = 0; input[i] != '\0'; i++) {
        if (!isdigit(input[i])) {
            return 0; // Não é um número válido
        }
    }
    return 1; // É um número válido
}

double lerPreco(const char *mensagem) {
    double valor;
    char input[100];
    char *endptr;

    while (1) {
        printf("%s: ", mensagem);
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = '\0'; // Remove o '\n'

        // Tenta converter para double
        valor = strtod(input, &endptr);

        // Verifica se a conversão foi bem-sucedida e se todo o input foi consumido
        if (*endptr == '\0' && valor > 0) {
            return valor;
        }

        printf(RED "Erro! Digite um número válido maior que zero.\n" RESET);
    }
}
